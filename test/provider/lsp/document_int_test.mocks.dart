// Mocks generated by Mockito 5.4.2 from annotations
// in quinine/test/provider/lsp/document_int_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quinine/config/lang.dart' as _i4;
import 'package:quinine/provider/project.dart' as _i3;
import 'package:quinine/services/file.dart' as _i5;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectDirectoryPath].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectDirectoryPath extends _i1.Mock
    implements _i3.ProjectDirectoryPath {
  @override
  _i2.NotifierProviderRef<String?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<String?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeNotifierProviderRef_0<String?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<String?>);
  @override
  set state(String? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeDirectoryPath(
    String? directoryPath, {
    _i4.LSPLanguage? language = _i4.LSPLanguage.dart,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeDirectoryPath,
          [directoryPath],
          {#language: language},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    String? previous,
    String? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i5.FileService {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get extension => (super.noSuchMethod(
        Invocation.getter(#extension),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i6.Future<String> readFileContent() => (super.noSuchMethod(
        Invocation.method(
          #readFileContent,
          [],
        ),
        returnValue: _i6.Future<String>.value(''),
        returnValueForMissingStub: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<void> writeToFile(String? fileContent) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [fileContent],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
