// Mocks generated by Mockito 5.4.2 from annotations
// in quinine/test/provider/lsp/document_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quinine/models/lsp/params/document/range.dart' as _i6;
import 'package:quinine/provider/lsp/document.dart' as _i3;
import 'package:quinine/services/lsp/document.dart' as _i4;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LSPDocument].
///
/// See the documentation for Mockito's code generation for more information.
class MockLSPDocument extends _i1.Mock implements _i3.LSPDocument {
  @override
  String get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set uri(String? _uri) => super.noSuchMethod(
        Invocation.setter(
          #uri,
          _uri,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AsyncNotifierProviderRef<_i4.DocumentSynchronization?> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAsyncNotifierProviderRef_0<_i4.DocumentSynchronization?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAsyncNotifierProviderRef_0<_i4.DocumentSynchronization?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AsyncNotifierProviderRef<_i4.DocumentSynchronization?>);
  @override
  _i2.AsyncValue<_i4.DocumentSynchronization?> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<_i4.DocumentSynchronization?>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub:
            _FakeAsyncValue_1<_i4.DocumentSynchronization?>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i4.DocumentSynchronization?>);
  @override
  set state(_i2.AsyncValue<_i4.DocumentSynchronization?>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i4.DocumentSynchronization?> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i5.Future<_i4.DocumentSynchronization?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i4.DocumentSynchronization?>.value(),
      ) as _i5.Future<_i4.DocumentSynchronization?>);
  @override
  _i5.Future<void> initializeDocument(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #initializeDocument,
          [filePath],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i4.DocumentSynchronization?> build(String? uri) =>
      (super.noSuchMethod(
        Invocation.method(
          #build,
          [uri],
        ),
        returnValue: _i5.Future<_i4.DocumentSynchronization?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i4.DocumentSynchronization?>.value(),
      ) as _i5.Future<_i4.DocumentSynchronization?>);
  @override
  _i5.Future<Map<String, dynamic>?> textDocDidOpen() => (super.noSuchMethod(
        Invocation.method(
          #textDocDidOpen,
          [],
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);
  @override
  _i5.Future<Map<String, dynamic>?> textDocDidChange(
    String? text, {
    int? startLine,
    int? startChar,
    int? endLine,
    int? endChar,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #textDocDidChange,
          [text],
          {
            #startLine: startLine,
            #startChar: startChar,
            #endLine: endLine,
            #endChar: endChar,
          },
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);
  @override
  _i6.Range? calculateTextChangeRange(
    String? oldText,
    String? newText,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateTextChangeRange,
          [
            oldText,
            newText,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Range?);
  @override
  _i5.Future<Map<String, dynamic>?> textDocDidClose() => (super.noSuchMethod(
        Invocation.method(
          #textDocDidClose,
          [],
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);
  @override
  _i5.Future<_i4.DocumentSynchronization?> update(
    _i5.FutureOr<_i4.DocumentSynchronization?> Function(
            _i4.DocumentSynchronization?)?
        cb, {
    _i5.FutureOr<_i4.DocumentSynchronization?> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i5.Future<_i4.DocumentSynchronization?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i4.DocumentSynchronization?>.value(),
      ) as _i5.Future<_i4.DocumentSynchronization?>);
  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i4.DocumentSynchronization?>? previous,
    _i2.AsyncValue<_i4.DocumentSynchronization?>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
